@* @{
    ViewData["Title"] = "User Account";
}

<div class="p-8 w-full">
    <!-- Title -->
    <h1 class="text-black mb-6 text-3xl font-bold">User Account</h1>

    <!-- Search Bar -->
    <div class="mb-6 flex items-center">
        <div class="flex w-1/2 items-center">
            <input type="text" placeholder="Search Username" class="border-gray-300 px-4 py-2 w-full rounded-md border focus:ring-[#12796F] focus:outline-none">
            <button class="ml-2 px-3 py-2 text-white rounded-md bg-[#12796F] hover:bg-[#0f5d57]">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.9 14.32a8 8 0 111.414-1.414l4.243 4.243a1 1 0 01-1.414 1.414l-4.243-4.243zM8 14a6 6 0 100-12 6 6 0 000 12z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
    </div>

    <!-- User Table -->
    <div class="overflow-x-auto">
        <table class="border-gray-300 min-w-full border-collapse border text-left text-sm">
            <thead class="bg-gray-100">
                <tr>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Username</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Email</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Phone Number</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">User Status</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Example Rows -->
                @for (int i = 0; i < 10; i++)
                {
                    <tr class="even:bg-gray-50">
                        <td class="border-gray-300 px-4 py-2 border">User</td>
                        <td class="border-gray-300 px-4 py-2 border">user@example.com</td>
                        <td class="border-gray-300 px-4 py-2 border">012-345678</td>
                        <td class="border-gray-300 px-4 py-2 border">Active</td>
                        <td class="border-gray-300 px-4 py-2 space-x-2 flex border">
                            <a href="/useraccount/ViewUser" class="text-white px-3 py-1 rounded-md bg-[#12796F] text-sm font-bold hover:bg-[#0f5d57]">View</a>
                            <a href="/useraccount/DeleteUser" class="text-white px-3 py-1 rounded-md bg-[#D97706] text-sm font-bold hover:bg-[#b45e05]">Delete</a>
                            <a href="/useraccount/RecoverUser" class="text-white px-3 py-1 rounded-md bg-[#3630EF] text-sm font-bold hover:bg-[#1E1AC8]">Recover</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="mt-6 space-x-2 flex items-center justify-center">
        <a href="#" class="px-3 py-1 bg-gray-200 text-gray-600 rounded-md hover:bg-gray-300">&laquo;</a>
        @for (int i = 1; i <= 5; i++)
        {
            <a href="#" class="px-3 py-1 bg-gray-200 text-gray-600 rounded-md hover:bg-gray-300">@i</a>
        }
        <a href="#" class="px-3 py-1 bg-gray-200 text-gray-600 rounded-md hover:bg-gray-300">&raquo;</a>
    </div>
</div>
 *@

@{
    ViewData["Title"] = "User Account";
}

<div class="p-8 w-full">
    <!-- Title -->
    <h1 class="text-black mb-6 text-3xl font-bold">User Account</h1>

    <!-- Search Bar -->
    <div class="mb-6 flex items-center">
        <div class="flex w-1/2 items-center">
            <input type="text" id="searchUsername" placeholder="Search Username"
                   class="border-gray-300 px-4 py-2 w-full rounded-md border focus:ring-[#12796F] focus:outline-none">
            <button id="searchButton"
                    class="ml-2 px-3 py-2 text-white rounded-md bg-[#12796F] hover:bg-[#0f5d57]">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.9 14.32a8 8 0 111.414-1.414l4.243 4.243a1 1 0 01-1.414 1.414l-4.243-4.243zM8 14a6 6 0 100-12 6 6 0 000 12z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>
    </div>

    <!-- User Table -->
    <div class="overflow-x-auto">
        <table id="userTable" class="border-gray-300 min-w-full border-collapse border text-left text-sm">
            <thead class="bg-gray-100">
                <tr>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Username</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Email</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Phone Number</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">User Status</th>
                    <th class="border-gray-300 px-4 py-2 border font-medium">Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Rows will be dynamically populated -->
            </tbody>
        </table>
    </div>
</div>

<script>
    // Load all users on page load
    async function loadUsers(query = "") {
        const url = query ? `/api/user/GetAllUsers?Username=${query}` : "/api/user/GetEverythingFromUsers";
        try {
            const response = await fetch(url);
            if (!response.ok) {
                populateUserTable([]); // Clear the table if no results are found
                throw new Error("Failed to load users.");
            }
            const users = await response.json();
            populateUserTable(users);
        } catch (error) {
            console.error(error);
            alert("No result found.");
        }
    }


    // function populateUserTable(users) {
    //     const tbody = document.querySelector("#userTable tbody");
    //     tbody.innerHTML = ""; // Clear existing rows

    //     if (users.length === 0) {
    //         // Show "No Results Found" row if no users are returned
    //         const noResultRow = document.createElement("tr");
    //         noResultRow.innerHTML = `
    //             <td colspan="5" class="border-gray-300 px-4 py-2 text-gray-500 border text-center">
    //                 No results found.
    //             </td>
    //         `;
    //         tbody.appendChild(noResultRow);
    //         return;
    //     }

    //     users.forEach(user => {
    //         const row = document.createElement("tr");
    //         row.classList.add("even:bg-gray-50");

    //         row.innerHTML = `
    //             <td class="border-gray-300 px-4 py-2 border">${user.username}</td>
    //             <td class="border-gray-300 px-4 py-2 border">${user.email}</td>
    //             <td class="border-gray-300 px-4 py-2 border">${user.phoneNumber}</td>
    //             <td class="border-gray-300 px-4 py-2 border">${user.status}</td>
    //             <td class="border-gray-300 px-4 py-2 space-x-2 flex border">
    //                 <button class="delete-btn text-white px-3 py-1 rounded-md bg-[#D97706] text-sm font-bold hover:bg-[#b45e05]" data-id="${user.id}">Delete</button>
    //                 <button class="recover-btn text-white px-3 py-1 rounded-md bg-[#3630EF] text-sm font-bold hover:bg-[#1E1AC8]" data-id="${user.id}">Recover</button>
    //             </td>
    //         `;

    //         tbody.appendChild(row);
    //     });

    //     // Attach event listeners for delete and recover buttons
    //     attachRowActionListeners();
    // }


    function populateUserTable(users) {
        const tbody = document.querySelector("#userTable tbody");
        tbody.innerHTML = ""; // Clear existing rows

        if (users.length === 0) {
            // Show "No Results Found" row if no users are returned
            const noResultRow = document.createElement("tr");
            noResultRow.innerHTML = `
                <td colspan="5" class="border-gray-300 px-4 py-2 text-gray-500 border text-center">
                    No results found.
                </td>
            `;
            tbody.appendChild(noResultRow);
            return;
        }

        users.forEach(user => {
            const row = document.createElement("tr");
            row.classList.add("even:bg-gray-50");

            row.innerHTML = `
                <td class="border-gray-300 px-4 py-2 border">${user.username}</td>
                <td class="border-gray-300 px-4 py-2 border">${user.email}</td>
                <td class="border-gray-300 px-4 py-2 border">${user.phoneNumber}</td>
                <td class="border-gray-300 px-4 py-2 border">${user.status}</td>
                <td class="border-gray-300 px-4 py-2 space-x-2 flex border">
                            <a href="/useraccount/ViewUser?id=${user.id}" class="text-white px-3 py-1 rounded-md bg-[#12796F] text-sm font-bold hover:bg-[#0f5d57]">View</a>
                    <button class="delete-btn text-white px-3 py-1 rounded-md bg-[#D97706] text-sm font-bold hover:bg-[#b45e05]" data-id="${user.id}">Delete</button>
                    <button class="recover-btn text-white px-3 py-1 rounded-md bg-[#3630EF] text-sm font-bold hover:bg-[#1E1AC8]" data-id="${user.id}">Recover</button>
                </td>
            `;

            tbody.appendChild(row);
        });

        // Attach event listeners for delete and recover buttons
        attachRowActionListeners();
    }



    // Attach event listeners to delete and recover buttons
    function attachRowActionListeners() {
        document.querySelectorAll(".delete-btn").forEach(button => {
            button.addEventListener("click", async () => {
                const userId = button.getAttribute("data-id");
                if (confirm("Are you sure you want to delete this user?")) {
                    try {
                        const response = await fetch(`/api/user/DeleteUser/${userId}`, { method: "PUT" });
                        if (!response.ok) throw new Error("Failed to delete user.");
                        alert("User deleted successfully.");
                        loadUsers();
                    } catch (error) {
                        console.error(error);
                        alert("An error occurred while deleting the user.");
                    }
                }
            });
        });

        document.querySelectorAll(".recover-btn").forEach(button => {
            button.addEventListener("click", async () => {
                const userId = button.getAttribute("data-id");
                if (confirm("Are you sure you want to recover this user?")) {
                    try {
                        const response = await fetch(`/api/user/RecoverUser/${userId}`, { method: "PUT" });
                        if (!response.ok) throw new Error("Failed to recover user.");
                        alert("User recovered successfully.");
                        loadUsers();
                    } catch (error) {
                        console.error(error);
                        alert("An error occurred while recovering the user.");
                    }
                }
            });
        });
    }

    // Search functionality
    document.getElementById("searchButton").addEventListener("click", () => {
        const query = document.getElementById("searchUsername").value.trim();
        loadUsers(query);
    });

    // Load users on page load
    document.addEventListener("DOMContentLoaded", () => {
        loadUsers();
    });
</script>
